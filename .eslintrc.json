{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "extends": ["eslint:recommended"],
  "parserOptions": {
    "tsconfigRootDir": ".",
    "project": ["tsconfig.base.json"]
  },
  "overrides": [
    // Nx
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    // Typescript
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nx/typescript"],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/no-floating-promises": [
          "error",
          {
            "ignoreVoid": false
          }
        ],
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": ["classMethod", "classProperty"],
            "format": null,
            "filter": {
              "regex": "^__", // ignore if starts with "__"
              "match": true
            }
          },
          {
            "selector": ["classMethod", "classProperty"],
            "modifiers": ["public"],
            "format": ["camelCase"],
            "leadingUnderscore": "forbid"
          },
          {
            "selector": ["classMethod", "classProperty"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          }
        ],
        "@typescript-eslint/no-unsafe-argument": "warn",
        "@typescript-eslint/no-unsafe-assignment": "warn",
        "@typescript-eslint/no-unsafe-call": "warn",
        "@typescript-eslint/no-unsafe-member-access": "warn",
        "@typescript-eslint/no-unsafe-return": "warn",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "vars": "all",
            "args": "all"
          }
        ],
        "no-await-in-loop": "warn",
        "no-console": "error",
        "no-warning-comments": [
          "error",
          {
            "terms": ["@nocommit", "no-commit", "@no-commit", "nocommit"],
            "location": "anywhere"
          }
        ],
        "eqeqeq": ["warn", "smart"],
        "no-restricted-syntax": [
          "error",
          {
            "selector": "TSEnumDeclaration",
            // This avoids issues where enums are stripped out due to tree-shaking
            "message": "Use object literals with 'as const' instead of enums"
          }
        ]
        // "require-await": "error"
      }
    },
    // Javascript
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"],
      "rules": {}
    },
    // Tests
    {
      "files": ["*.test.ts", "*.test.tsx", "*.test.js", "*.test.jsx"],
      "env": {
        "jest": true
      },
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-floating-promises": [
          "error",
          {
            "ignoreVoid": true
          }
        ],
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-return": "off"
      }
    }
  ]
}
